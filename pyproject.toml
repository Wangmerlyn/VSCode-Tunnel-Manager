[build-system]
requires = [
  "setuptools>=61.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "vscode_tunnel_manager"
dynamic = ["version"]  # Let setuptools read the version dynamically
description = "A python package to manage VSCode tunnels."
readme = {file = "README.md", content-type = "text/markdown"}

authors = [
  {name = "Siyuan Wang", email = "sywang0227@gmail.com"},
]
maintainers = [
  {name = "Siyuan Wang", email = "sywang0227@gmail.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
license = {text = "MIT license"}
dependencies = [
  "typer",
  "colorlog",
  "requests",
]

[project.scripts]
vscode_tunnel_manager = "vscode_tunnel_manager.cli:main"

[project.optional-dependencies]
dev = [
  "coverage",       # Testing
  "mypy",           # Type checking
  "pytest",         # Testing
  "ruff",           # Linting and formatting
  "pre-commit",    # Git hooks
  "bump-my-version",   # Version management
]

[project.urls]
bugs = "https://github.com/Wangmerlyn/VSCode-Tunnel-Manager/issues"
changelog = "https://github.com/Wangmerlyn/VSCode-Tunnel-Manager/blob/master/changelog.md"
homepage = "https://github.com/Wangmerlyn/VSCode-Tunnel-Manager"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# Dynamic version source: reads __version__ from VSCode-Tunnel-Manager package
[tool.setuptools.dynamic]
version = {attr = "vscode_tunnel_manager.__version__"}

# -----------------------------
# bump-my-version configuration
[tool.bumpversion]
current_version = "0.0.2"
commit          = true
tag             = true
tag_name        = "v{new_version}"
allow_dirty     = true

# Either 0.1.0   or 0.1.0.post3
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(?:\\.post(?P<post>\\d+))?"

# 1) default – no suffix       2) when bumping `post`
serialize = [
    "{major}.{minor}.{patch}",
    "{major}.{minor}.{patch}.post{post}"
]

# Tell bump-my-version what to change
search        = "{current_version}"
replace       = "{new_version}"
ignore_missing_version = false
regex         = false     # use literal search unless you need RegEx

# --- files that hold the version ---------------------------------
[[tool.bumpversion.files]]
filename = "src/vscode_tunnel_manager/__init__.py"

[[tool.bumpversion.files]]
filename  = "pyproject.toml"
search    = 'current_version = "{current_version}"'
replace   = 'current_version = "{new_version}"'

# --- version-part specific behaviour -----------------------------
# numeric by default for major/minor/patch – nothing to override
[tool.bumpversion.parts.post]
first_value    = "0"   # when the suffix first appears
optional_value = ""    # omit `.postN` unless we’re bumping `post`


# -----------------------------
# Mypy type checking
[tool.mypy]
files = "."

# Use strict defaults
strict = true
warn_unreachable = true
warn_no_return = true
# remove this line after pytest has type annotations
# see https://fuchsia.googlesource.com/third_party/github.com/pylint-dev/pylint/%2B/259fbd23960d3f4bbb36d9a0c1ca60168dc8fcaa/pyproject.toml?utm_source=chatgpt.com for related code
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"
disallow_untyped_decorators = false


# Ruff linter
[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "I", "W"]
ignore = []
exclude = ["build", "dist", ".venv"]

[tool.ruff.lint.isort]
known-first-party = ["vscode_tunnel_manager"]
combine-as-imports = true
force-single-line = false
